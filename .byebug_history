c
can :read, Leave, :published => true
can :read, Leave, :published+>true
user.is_subordinate?
c
user.type == 'Subordinate'
user.is?
can :read, Leave, user:subordinate
User.type
can  :new, Leave
c
User.type
Use.is_type
User.type
can [:read, :create], Leave
can :read, User
c
can? :read, leave
can? :create, leave
can? :update, leave
leave = Leave.find(49)
c
can :create, Leave
can :create, @leave
c
can :read, Leave, user:subordinate
can :read, Leave, user:user
c
can :new, Leave
can :create, Leave
can :create, :leave
c
can :create, Leave
c
can? :update, Leave
can? :read, Leave
can :read, Leave
can :create, Leave
c
can :create, Leave
c
can :manage, :all
can :manage, :read
can :manage, :create
c
cannot? :create, Leave
can :create, Leave
can :update, Leave
c
can :create, Leave
can :manage, all
can :manage, :all
c
can :create, Leave
c
can? :update, Leave
user.is?
user.type
User.type
can :read, Leave
can :create, Leave
can create Leave
can :create, Leave
cannot? :update, Leave
cannot :update, Leave
c
user.is_subordinate?
can :update, Leave
can :read, Leave
can :create, Leave
continue
c
user
c
 can [:read, :new, :create], Leave, user: user
user
c
Leave.last
User.last
user.leaves.update(status:true)
user.leaves.create(date:"22/04/2022",reason:"shadi",user_id:7)
user.leaves.craete(date:"22/04/2022",reason:"shadi",user_id:7)
user.leaves.update(status:true)
user.leave.update(status:true)
user = User.last
User.last
user.type
can [:read, :update], Leave, user:user
c
cannot :manage, :update
cannot :manage, :only, :update
cannot :manage, :only:update
Leave.last.update(status:true)
Leave.create(date:"12/2/2022",reason:"shadi",user_id:1)
Leave.new
user.type
c
can :manage, :create
can :manage, :read
c
can :manage, :read
c
can :manage, :read, :create,
can :manage, :read, :create
can :manage, :read
can :manage
c
can :read, :create, :Leave
c
can:create, :all
can:read, :all
can:create,read, :all
c
[:leave]
cannot :update,:all
cannot :create,:all
cannot :create,:leave
cannot? :update,:leave
cannot :update,:leave
if user.is_manager?
if user.is_manager?end
if user.is_manager?
continue
user.type == 'Subordinate'
continue
user.type
user.type.equal?("Subordinate")
user.type
user.class.equal?("Subordinate")
user.class.name.equals("Subordinate")
user.class.name.equal?("Subordinate")
user.class.name
user.class.name.equal?('Subordinate')
user.class.name.equals?('Subordinate')
user.class.name
user.class
user.class_name.is_a('Subordinate')
user.class.is_a('Subordinate')
user.class.is_a?('Subordinate')
user.class
user.is_subordinate?
user.is_a?('Subordinate')
user
user.present?
c
1
load_and_authorize_resource
c
Leave.last
@leave = Leave.update(status:true)
          can :update, Leave
leafe_path
c
@leave = Leave.all
@leaves
load_and_authorize_resource
c
redirect_to leaves_path
c
@leave.update(status:params[:status])
@leave.update(status:params[:leave][:status])
@leave = Leave.find(params[:id])
c
leave = Leave.update(status:params[:status])c
leave = Leave.update(status:params[:status])
@leave.update(status:params[:status])
c
  status:params[:status])
 @leave.update(
  status:params[:status])
@leave = Leave.update(status:true) @leave.update(
@leave = Leave.update(status:true)
@leave = Leave.update
@leave.update(status:params[:leave][:status])
@leave.update
@leave = Leave.find(params[:id])
params
parameters
status:params[:status]
status:params
status:params[:leave][:status]
c
continue
params[:status]
params[:leave][:status]
params
continue
params
c
   36:   status:params[:leave][:status])
leaves_path
c
